# Note: This file is in Python syntax and format

################################################################################
# WsgiDAV configuration file used for client test plan
#
# Version Date         Info
# 1.0     2013-12-14   Created
#
################################################################################
# INITIALIZATION - Do not modify this section

provider_mapping = {}
user_mapping = {}


def addShare(shareName, davProvider):
    provider_mapping[shareName] = davProvider


def addUser(realmName, user, password, description, roles=[]):
    realmName = "/" + realmName.strip(r"\/")
    userDict = user_mapping.setdefault(realmName, {}).setdefault(user, {})
    userDict["password"] = password
    userDict["description"] = description
    userDict["roles"] = roles


################################################################################
# SERVER OPTIONS
#===============================================================================
server = "cheroot"


#===============================================================================
# Additional Options
#

# Add the MS-Author-Via Response Header to OPTIONS command
add_header_MS_Author_Via = True



#===============================================================================
# Debugging

verbose = 1          # 0 - no output (excepting application exceptions)
                     # 1 - show single line request summaries (HTTP logging)
                     # 2 - show additional events
                     # 3 - show full request/response header info (HTTP Logging)
                     #     request body and GET response bodies not shown


debug_methods = [
#                 "PROPFIND",
#                 "PROPPATCH",
#                 "MKCOL",
#                 "POST",
#                 "DELETE",
#                 "PUT",
#                 "COPY",
#                 "MOVE",
#                 "LOCK",
#                 "UNLOCK",
#                 "OPTIONS",
#                 "GET",
#                 "HEAD",
                 ]

debug_litmus = [
#                "lock_excl",
#                "http: 1",
#                "mkcol_with_body",
#                "notowner_modify",
#                "cond_put_corrupt_token",
#                "copy_coll",
#                "fail_cond_put_unlocked",
#                "fail_complex_cond_put",
#                "basic: 9",
#                "props: 16",
#                "locks: 9",
#                "http: 2",
                ]

# Enable specific module loggers
# E.g. ["lock_manager", "property_manager", "http_authenticator", ...]

enable_loggers = [
#                  "ext_wsgiutils_server",
#                  "wsgidav.ext_wsgiutils_server",
#                  "http_authenticator",
#                  "lock_manager",
#                  "lock_storage",
#                  "request_server",
#                  "dav_provider",
#                  "fs_dav_provider",
#                  "mysql_dav_provider",
                  ]


################################################################################
# WsgiDavDirBrowser

dir_browser = {
    "enable": True,             # Render HTML listing for GET requests on collections
    "response_trailer": "",     # Raw HTML code, appended as footer
    "davmount": True,           # Send <dm:mount> response if request URL contains '?davmount'
    "msmount": True,            # Add an 'open as webfolder' link (requires Windows)
#    "msSharepointUrls": True,   # Prepend 'ms-word:ofe|u|' to URL for MS Offce documents
    "msSharepointHelper": True, # Use
}


################################################################################
# DAV Provider

#===============================================================================
# Property Manager
#
# Uncomment this lines to specify your own property manager.
# Default:        wsgidav.prop_man.property_manager.PropertyManager
# Also available: wsgidav.prop_man.property_manager.ShelvePropertyManager
#

# Example: Use in-memory property manager (this is also the default)
from wsgidav.prop_man.property_manager import PropertyManager
property_manager = PropertyManager()

# Example: Use PERSISTENT shelve based property manager
#from wsgidav.prop_man.property_manager import ShelvePropertyManager
#property_manager = ShelvePropertyManager("wsgidav-props.shelve")



#===============================================================================
# Lock Manager
#
# Uncomment this lines to specify your own locks manager.
# Default:        wsgidav.lock_storage.LockStorageDict
# Also available: wsgidav.lock_storage.LockStorageShelve
#
# Check the documentation on how to develop custom lock managers.
# Note that the default LockStorageDict works in-memory, and thus is NOT
# persistent.

# Example: Use in-memory lock manager
#          (this is the same as passing 'lock_manager = True', which is default)
#from wsgidav.lock_storage import LockStorageDict
#lock_manager = LockStorageDict()


# Example: Use PERSISTENT shelve based lock manager
#from wsgidav.lock_storage import LockStorageShelve
#lock_manager = LockStorageShelve("wsgidav-locks.shelve")


#===============================================================================
# SHARES
#
# If you would like to publish files in the location '/v_root' through a
# WsgiDAV share 'files', so that it can be accessed by this URL:
#     http://server:port/files
# insert the following line:
#     addShare("files", "/v_root")
# or, on a Windows box:
#     addShare("files", "c:\\v_root")
#
# To access the same directory using a root level share
#     http://server:port/
# insert this line:
#     addShare("", "/v_root")
#
# The above examples use wsgidav.fs_dav_provider.FilesystemProvider, which is
# the default provider implementation.
#
# If you wish to use a custom provider, an object must be passed as second
# parameter. See the examples below.

#addShare("", r"C:\temp\davshare")
#addShare("dav", "~/wsgidav_test")
addShare("", "~/wsgidav_test")

### Add a read-only file share:
#from wsgidav.fs_dav_provider import FilesystemProvider
#addShare("dav_ro", FilesystemProvider("/temp/dav_ro", readonly=True))


################################################################################
# AUTHENTICATION
#===============================================================================
# HTTP Authentication Options

accept_basic = True    # Allow basic authentication, True or False
accept_digest = True   # Allow digest authentication, True or False
default_to_digest = True  # True (default digest) or False (default basic)
trusted_auth_header = None


#===============================================================================
# USERS
#
# This section is ONLY used by the DEFAULT Domain Controller.
#
# Users are defined per realm:
#     addUser(<realm>, <user>, <password>, <description>)
#
# Note that the default Domain Controller uses the share name as realm name.
#
# If no users are specified for a realm, no authentication is required.
# Thus granting read-write access to anonymous!
#
# Note: If you wish to use Windows WebDAV support (such as Windows XP's My
# Network Places), you need to include the domain of the user as part of the
# username (note the DOUBLE slash), such as:
# addUser("v_root", "domain\\user", "password", "description")

addUser("", "tester", "secret", "")
addUser("", "tester2", "secret2", "")
#addUser("dav", "tester", "secret", "")
#addUser("dav", "tester2", "secret2", "")
